/*
 * Stellarium
 * Copyright (C) 2008 Matthew Gates
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*!

@mainpage Stellarium Developers Documentation

@section intro_sec Introduction

This documentation concerns the inner workings of Stellarium.  This documentation 
is targetted at developers of scripts, plugins and the core program.

@section architecture_sec Program Architecture

The code of Stellarium is split into several main blocks: <ul>

<li> the main loop and main widget classes StelMainWindow, StelMainGraphicsView and
StelAppGraphicsWidget.  Those classes have a single instance created at startup by the ::main()
function.  They perform tasks such as creating of the main window and renderer, creating the
stellarium core, creating the GUI. After initialization, they manage user's input event
propagation and event loop. They are heavily based on %Qt features.  </li>

<li> the core which provides generic services and features to the other components.  The main
class is the StelApp singleton which is used everywhere in the code to access other elements.
The StelApp instance creates all the main core services and modules at initialization.  Example
services are sky layer management (e.g. images which have a fixed position in the sky) with the
StelSkyLayerMgr, drawing with StelRenderer etc. . Two especially important manager classes are
the StelModuleMgr and StelCore: the former manages the collection of StelModule instances
registered in the program (see next point for more info on what a StelModule is). The latter
provides performance critical features for computing coordinate transformation and other
mathematical services.  </li>

<li> a collection of StelModule instances which display the main elements of the program such as
planets and stars. Each StelModule should be registered to the StelModuleMgr. Because many
Stellarium components derive from the StelModule class, the main loop is able to treat them
generically by calling their standard methods such StelModule::update() and StelModule::draw()
at each program iteration. This also allows other program components to access them by name.
StelModule can also be loaded dynamically by Stellarium, which is the standard way of creating
@ref plugins.  </li>

<li> the Graphical User Interface (StelGui). It is based on styled %Qt widgets which are
rendered directly in the graphics window. User actions trigger signals connected to core and
StelModules slots.  </li>

<li> the script engine (StelScriptMgr) allows scripts to calls slots from the core and
StelModule slots.  </li>

</ul>
@image html stellarium-architecture.png

@image html stellarium-logo.png

*/
